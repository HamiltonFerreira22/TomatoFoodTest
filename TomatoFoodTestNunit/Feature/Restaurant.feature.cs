// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TomatoFoodTest.Feature
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Restaurante")]
    public partial class RestauranteFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "Restaurant.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("pt-br"), "Feature", "Restaurante", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cadastro de restaurante")]
        [NUnit.Framework.CategoryAttribute("API_Restaurant")]
        [NUnit.Framework.TestCaseAttribute("Rokaido", "Japonês", "Sushi Select", "Peixe", "Salmao", "22.25", null)]
        [NUnit.Framework.TestCaseAttribute("Rokaido", "Japonês", "Sushi Select", "Peixe", "Salmao", "22.25", null)]
        [NUnit.Framework.TestCaseAttribute("Rokaido", "Japonês", "Sushi Select", "Peixe", "Salmao", "22.25", null)]
        [NUnit.Framework.TestCaseAttribute("Rokaido", "Japonês", "Sushi Select", "Peixe", "Salmao", "22.25", null)]
        [NUnit.Framework.TestCaseAttribute("Rokaido", "Japonês", "Sushi Select", "Peixe", "Salmao", "22.25", null)]
        public void CadastroDeRestaurante(string nome_Restaurante, string tipo_Restaurante, string descricao_Restaurante, string refeicao, string descRefe, string preco, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "API_Restaurant"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("nome_restaurante", nome_Restaurante);
            argumentsOfScenario.Add("tipo_restaurante", tipo_Restaurante);
            argumentsOfScenario.Add("descricao_restaurante", descricao_Restaurante);
            argumentsOfScenario.Add("refeicao", refeicao);
            argumentsOfScenario.Add("DescRefe", descRefe);
            argumentsOfScenario.Add("preco", preco);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cadastro de restaurante", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
 testRunner.Given("que tenho perfil de gerente", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line hidden
#line 11
 testRunner.When(string.Format("envio o cadastro com restaurante, descricao, tipo e refeicao \'{0}\' \'{1}\' \'{2}\' \'{" +
                            "3}\' \'{4}\' \'{5}\'", nome_Restaurante, descricao_Restaurante, tipo_Restaurante, refeicao, descRefe, preco), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line hidden
#line 13
 testRunner.Then("deve cadastrar com sucesso o restaurante", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
